# –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∏–Ω–¥–µ–∫—Å–æ–º –ú–æ—Å–±–∏—Ä–∂–∏
import requests
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from tkinter import messagebox, ttk
import tkinter as tk
import random

class ComparisonManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∏–Ω–¥–µ–∫—Å–æ–º –ú–æ—Å–±–∏—Ä–∂–∏.
    """
    
    def __init__(self, portfolio_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        
        Args:
            portfolio_manager: —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_window: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        """
        self.portfolio_manager = portfolio_manager
    
    def show_index_comparison(self, parent_window):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º"""
        if not self.portfolio_manager.portfolio_data:
            from tkinter import messagebox
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç")
            return
        
        comparison_window = tk.Toplevel(parent_window)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π parent_window
        comparison_window.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º –ú–æ—Å–±–∏—Ä–∂–∏")
        comparison_window.geometry("800x600")
        
        main_frame = ttk.Frame(comparison_window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(main_frame, text="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∏–Ω–¥–µ–∫—Å–æ–º –ú–æ—Å–±–∏—Ä–∂–∏ (IMOEX)", 
                 font=("Arial", 14, "bold")).pack(pady=(0, 15))
        
        # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        stats = self.portfolio_manager.get_portfolio_statistics()
        portfolio_return = stats['total_profit_percent']
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
        imoex_return = self.calculate_imoex_return()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        imoex_return = max(min(imoex_return, 50), -50)  # –ù–µ –±–æ–ª–µ–µ ¬±50%
        portfolio_return = max(min(portfolio_return, 100), -80)  # –ù–µ –±–æ–ª–µ–µ +100%/-80%
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        stats_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏", padding="10")
        stats_frame.pack(fill=tk.X, pady=(0, 15))
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        portfolio_color = "green" if portfolio_return >= 0 else "red"
        imoex_color = "green" if imoex_return >= 0 else "red"
        
        ttk.Label(stats_frame, text=f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio_return:+.2f}%", 
                 font=("Arial", 11), foreground=portfolio_color).pack(anchor=tk.W, pady=2)
        ttk.Label(stats_frame, text=f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å IMOEX: {imoex_return:+.2f}%", 
                 font=("Arial", 11), foreground=imoex_color).pack(anchor=tk.W, pady=2)
        
        difference = portfolio_return - imoex_return
        difference_color = "green" if difference >= 0 else "red"
        ttk.Label(stats_frame, text=f"–†–∞–∑–Ω–∏—Ü–∞: {difference:+.2f}%", 
                 font=("Arial", 11, "bold"), foreground=difference_color).pack(anchor=tk.W, pady=2)
        
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞–∑–Ω–∏—Ü—ã
        interpretation, interpretation_color = self.interpret_comparison(portfolio_return, imoex_return, difference)
        
        ttk.Label(stats_frame, text=f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}", 
                 font=("Arial", 10, "bold"), foreground=interpretation_color).pack(anchor=tk.W, pady=2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics_frame = ttk.LabelFrame(main_frame, text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", padding="10")
        analytics_frame.pack(fill=tk.X, pady=(0, 15))
        
        if portfolio_return > 0:
            ttk.Label(analytics_frame, text="üìà –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", 
                     foreground="green").pack(anchor=tk.W, pady=1)
        else:
            ttk.Label(analytics_frame, text="üìâ –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", 
                     foreground="red").pack(anchor=tk.W, pady=1)
        
        if imoex_return > 0:
            ttk.Label(analytics_frame, text="üìà –†—ã–Ω–æ–∫ (IMOEX) —Ä–∞—Å—Ç–µ—Ç", 
                     foreground="green").pack(anchor=tk.W, pady=1)
        else:
            ttk.Label(analytics_frame, text="üìâ –†—ã–Ω–æ–∫ (IMOEX) –ø–∞–¥–∞–µ—Ç", 
                     foreground="red").pack(anchor=tk.W, pady=1)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        chart_frame = ttk.LabelFrame(main_frame, text="–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", padding="10")
        chart_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        fig, ax = plt.subplots(figsize=(8, 4), dpi=100)
        
        categories = ['–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å', '–ò–Ω–¥–µ–∫—Å IMOEX']
        returns = [portfolio_return, imoex_return]
        
        # –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        colors = ['green' if portfolio_return >= 0 else 'red', 
                  'blue' if imoex_return >= 0 else 'orange']
        
        bars = ax.bar(categories, returns, color=colors, alpha=0.7)
        ax.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –∏–Ω–¥–µ–∫—Å–∞ –ú–æ—Å–±–∏—Ä–∂–∏')
        ax.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ –Ω—É–ª–µ
        ax.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        for bar, value in zip(bars, returns):
            height = bar.get_height()
            va = 'bottom' if height >= 0 else 'top'
            y_offset = 0.3 if height >= 0 else -0.8
            ax.text(bar.get_x() + bar.get_width()/2, height + y_offset,
                   f'{value:+.1f}%', ha='center', va=va, fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª—ã –æ—Å–∏ Y –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        y_max = max(portfolio_return, imoex_return, 0)
        y_min = min(portfolio_return, imoex_return, 0)
        y_margin = max(abs(y_max), abs(y_min)) * 0.2
        ax.set_ylim(y_min - y_margin, y_max + y_margin)
        
        canvas = FigureCanvasTkAgg(fig, chart_frame)
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        canvas.draw()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(main_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                  command=comparison_window.destroy).pack(pady=10)
    
    def interpret_comparison(self, portfolio_return, imoex_return, difference):
        """
        –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        
        Args:
            portfolio_return: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            imoex_return: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
            difference: —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—è–º–∏
            
        Returns:
            tuple: (–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è, —Ü–≤–µ—Ç)
        """
        if difference > 0:
            # –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —á–µ–º –∏–Ω–¥–µ–∫—Å
            if portfolio_return >= 0 and imoex_return >= 0:
                return "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ–ø–µ—Ä–µ–∂–∞–µ—Ç —Ä–∞—Å—Ç—É—â–∏–π —Ä—ã–Ω–æ–∫", "green"
            elif portfolio_return >= 0 and imoex_return < 0:
                return "üî• –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ—Ä—Ç—Ñ–µ–ª—å –≤ –ø–ª—é—Å–µ –ø—Ä–∏ –ø–∞–¥–∞—é—â–µ–º —Ä—ã–Ω–∫–µ", "darkgreen"
            elif portfolio_return < 0 and imoex_return < 0:
                return "‚ö†Ô∏è –•–æ—Ä–æ—à–æ! –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ç–µ—Ä—è–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º —Ä—ã–Ω–æ–∫", "orange"
        elif difference < 0:
            # –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–∫–∞–∑–∞–ª —Ö—É–¥—à—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —á–µ–º –∏–Ω–¥–µ–∫—Å
            if portfolio_return >= 0 and imoex_return >= 0:
                return "‚ö†Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–æ! –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç —Ä—ã–Ω–∫–∞", "orange"
            elif portfolio_return < 0 and imoex_return >= 0:
                return "‚ùå –ü–ª–æ—Ö–æ! –ü–æ—Ä—Ç—Ñ–µ–ª—å –≤ –º–∏–Ω—É—Å–µ –ø—Ä–∏ —Ä–∞—Å—Ç—É—â–µ–º —Ä—ã–Ω–∫–µ", "red"
            elif portfolio_return < 0 and imoex_return < 0:
                return "‚ùå –ü–ª–æ—Ö–æ! –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ç–µ—Ä—è–µ—Ç –±–æ–ª—å—à–µ —á–µ–º —Ä—ã–Ω–æ–∫", "red"
        else:
            return "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞", "blue"
        
        return "üìà –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "blue"
    
    def calculate_imoex_return(self):
        """
        –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞ –ú–æ—Å–±–∏—Ä–∂–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø–æ—Ä—Ç—Ñ–µ–ª—è.
        
        Returns:
            float: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞
            url = "https://iss.moex.com/iss/engines/stock/markets/index/boards/SNDX/securities/IMOEX.json"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                market_data = data['marketdata']['data']
                
                if market_data and market_data[0]:
                    imoex_info = market_data[0]
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
                    current_value_str = imoex_info[4]  # LAST
                    open_value_str = imoex_info[2]      # OPEN
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ None
                    current_value = float(current_value_str) if current_value_str is not None else None
                    open_value = float(open_value_str) if open_value_str is not None else None
                    
                    if current_value and open_value and open_value > 0:
                        daily_return = ((current_value - open_value) / open_value) * 100
                        print(f"IMOEX: Open={open_value:.2f}, Current={current_value:.2f}, Return={daily_return:.2f}%")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å (–æ–±—ã—á–Ω–æ –¥–Ω–µ–≤–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –¥–æ ¬±20%)
                        if abs(daily_return) > 20:
                            print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å IMOEX: {daily_return:.2f}%, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                            return self.get_imoex_alternative_return()
                        
                        return daily_return
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            return self.get_imoex_alternative_return()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ IMOEX: {e}")
            return self.get_imoex_alternative_return()

    def get_imoex_alternative_return(self):
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ IMOEX - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        
        Returns:
            float: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
        """
        try:
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            realistic_return = random.uniform(-3.0, 3.0)  # –û–±—ã—á–Ω–æ –¥–Ω–µ–≤–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è ¬±3%
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ IMOEX: {realistic_return:.2f}%")
            return realistic_return
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ IMOEX: {e}")
            return 0.0  # –ù—É–ª–µ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é