# stock_monitor.py
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import threading
import time
import json
import pandas as pd
from datetime import datetime, timedelta
from data_handler import DataHandler
from chart_manager import ChartManager
from calculator_window import CalculatorWindow
from commission_manager import CommissionManager
from etf_portfolio_window import ETFPortfolioWindow
class StockMonitor:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ü–∏–π.
    –°–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self, root):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = root
        self.root.title("–ú–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ü–∏–π")
        self.root.geometry("1400x800")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.current_ticker = "SBER"  # –¢–∏–∫–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.data_handler = DataHandler(self.current_ticker)
        self.chart_manager = ChartManager()
        self.calculator_windows = []  # –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        self.update_interval = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.auto_update = True   # –§–ª–∞–≥ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_menu()        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é
        self.create_widgets()     # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self.load_daily_data()    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.update_data()        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
    
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–°–º–µ–Ω–∏—Ç—å —Ç–∏–∫–µ—Ä", command=self.change_ticker)
        file_menu.add_command(label="–ü–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π", command=self.open_portfolio)
        file_menu.add_command(label="–ü–æ—Ä—Ç—Ñ–µ–ª—å ETF", command=self.open_etf_portfolio)
        file_menu.add_command(label="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä IBO", command=self.open_calculator)
        file_menu.add_command(label="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –®–∞—Ä–ø–∞", command=self.open_sharpe_calculator)
        file_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π", command=self.open_commission_settings)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é "–í–∏–¥"
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–í–∏–¥", menu=view_menu)
        view_menu.add_command(label="–í–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫", 
                             command=lambda: self.show_tab(0))
        view_menu.add_command(label="–ì—Ä–∞—Ñ–∏–∫ –∑–∞ –¥–µ–Ω—å", 
                             command=lambda: self.show_tab(1))
        
        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)
        settings_menu.add_command(label="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                                command=self.change_interval_dialog)
        
        # –ú–µ–Ω—é "–û–∫–Ω–∞" (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–∫–Ω–∞–º–∏)
        self.windows_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–û–∫–Ω–∞", menu=self.windows_menu)
        self.windows_menu.add_command(label="–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ", 
                                     command=self.focus_main_window)
        self.windows_menu.add_separator()
        self.windows_menu.add_command(label="–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", 
                                     command=self.close_all_calculators)
        
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
   
    
    def open_commission_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–∏—Å—Å–∏–π"""
        if hasattr(self, 'portfolio_window') and self.portfolio_window:
            self.portfolio_window.commission_manager.show_commission_settings()
        else:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∏—Å—Å–∏–π
            temp_manager = CommissionManager(self.root)
            temp_manager.show_commission_settings()
        
    def change_ticker(self):
        """–°–º–µ–Ω–∞ —Ç–∏–∫–µ—Ä–∞ –∞–∫—Ü–∏–∏"""
        new_ticker = simpledialog.askstring("–°–º–µ–Ω–∞ —Ç–∏–∫–µ—Ä–∞", 
                                          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏:",
                                          initialvalue=self.current_ticker)
        if new_ticker and new_ticker.strip():
            new_ticker = new_ticker.strip().upper()
            if new_ticker != self.current_ticker:
                self.current_ticker = new_ticker
                self.data_handler.set_ticker(new_ticker)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                self.root.title(f"–ú–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ü–∏–π - {self.current_ticker}")
                
                # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.chart_manager.clear_charts()
                self.load_daily_data()
                self.manual_update()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–∏–∫–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {self.current_ticker}")
    
    def open_calculator(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        calculator = CalculatorWindow(self.root, self.data_handler)
        self.calculator_windows.append(calculator)
        self.update_windows_menu()
        
    def update_windows_menu(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ–∫–æ–Ω"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –æ–∫–æ–Ω (–∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –ø—É–Ω–∫—Ç–æ–≤)
        self.windows_menu.delete(2, tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        for i, calculator in enumerate(self.calculator_windows):
            self.windows_menu.add_command(
                label=f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä {i+1}", 
                command=calculator.focus
            )
        
    def focus_main_window(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.root.focus_force()
        
    def close_all_calculators(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ–∫–æ–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        for calculator in self.calculator_windows[:]:
            calculator.close()
        self.calculator_windows.clear()
        self.update_windows_menu()
            
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
        –ú–û–ù–ò–¢–û–† –ê–ö–¶–ò–ô –ò ETF - –í–ï–†–°–ò–Ø 2.0

        üìä –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:

        ‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–π –∏ ETF –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏
        ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏: –í–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã–µ –∏ –¥–Ω–µ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω
        ‚Ä¢ –ü–æ—Ä—Ç—Ñ–µ–ª–∏: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏ –∞–∫—Ü–∏–π –∏ ETF
        ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞, –¥–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        ‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã: –°—Ç–æ–∏–º–æ—Å—Ç–∏, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, –∫–æ–º–∏—Å—Å–∏–π

        üéØ –û–°–ù–û–í–ù–´–ï –ú–û–î–£–õ–ò:

        üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¶–ò–ô
          - –ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          - –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
          - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤
          - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

        üíº –ü–û–†–¢–§–ï–õ–¨ –ê–ö–¶–ò–ô
          - –£—á–µ—Ç –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂
          - –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤
          - –£—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∏ –Ω–∞–ª–æ–≥–æ–≤
          - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º –ú–æ—Å–±–∏—Ä–∂–∏

        üè¶ –ü–û–†–¢–§–ï–õ–¨ ETF
          - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ—Ç —Ñ–æ–Ω–¥–æ–≤
          - –†–∞—Å—á–µ—Ç –¥–∏–≤–∏–¥–µ–Ω–¥–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
          - –ì–æ–¥–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –∏ yield
          - –õ—å–≥–æ—Ç–Ω–æ–µ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ

        üì± –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–´
          - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ IBO
          - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
          - –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
          - –ù–∞–ª–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã

        ‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:

        ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: MOEX ISS API
        ‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: Tkinter —Å matplotlib
        ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è (1-300 —Å–µ–∫)
        ‚Ä¢ –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞: CSV, JSON
        ‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8

        üìã –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ê–ö–¢–ò–í–´:

        ‚Ä¢ –ê–∫—Ü–∏–∏: SBER, GAZP, LKOH, YNDX, etc.
        ‚Ä¢ ETF: FXRB, FXRL, SBMX, SBSP, etc.
        ‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã: IMOEX, RTSI

        üîß –¢–ï–•–ù–û–õ–û–ì–ò–ò:

        ‚Ä¢ Python 3.7+
        ‚Ä¢ Tkinter - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        ‚Ä¢ Matplotlib - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        ‚Ä¢ Requests - —Ä–∞–±–æ—Ç–∞ —Å API MOEX
        ‚Ä¢ Pandas - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

        üë®‚Äçüíª –†–ê–ó–†–ê–ë–û–¢–ö–ê:

        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
        –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ
        —Ä—ã–Ω–∫–∞ –∞–∫—Ü–∏–π –∏ ETF.

        ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:

        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π - –≤–∞—à–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.
        """

        about_window = tk.Toplevel(self.root)
        about_window.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ - –ú–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ü–∏–π –∏ ETF")
        about_window.geometry("700x600")
        about_window.resizable(True, True)
        about_window.transient(self.root)
        about_window.grab_set()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(about_window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, 
                               text="–ú–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ü–∏–π –∏ ETF - –í–µ—Ä—Å–∏—è 2.0", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 15))
        
        # –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_frame = ttk.Frame(main_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        text_widget = tk.Text(text_frame, wrap=tk.WORD, width=80, height=25,
                             font=("Arial", 10), padx=10, pady=10)
        
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)
        
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text_widget.insert(tk.END, about_text.strip())
        text_widget.config(state=tk.DISABLED)  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=15)
        
        ttk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                  command=about_window.destroy).pack()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        about_window.update_idletasks()
        x = (about_window.winfo_screenwidth() // 2) - (about_window.winfo_width() // 2)
        y = (about_window.winfo_screenheight() // 2) - (about_window.winfo_height() // 2)
        about_window.geometry(f"+{x}+{y}")
    
    def show_tab(self, tab_index):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É"""
        self.notebook.select(tab_index)
        
    def change_interval_dialog(self):
        """–î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        dialog.geometry("300x150")
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã):").pack(pady=10)
        
        interval_var = tk.StringVar(value=str(self.update_interval))
        interval_combo = ttk.Combobox(dialog, textvariable=interval_var,
                                     values=["1", "5", "10", "15", "30", "60"], width=10)
        interval_combo.pack(pady=5)
        
        def apply_interval():
            try:
                new_interval = int(interval_var.get())
                if 1 <= new_interval <= 300:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 300 —Å–µ–∫—É–Ω–¥
                    self.update_interval = new_interval
                    self.auto_update_status.config(
                        text=f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ (–∫–∞–∂–¥—ã–µ {self.update_interval} —Å–µ–∫)"
                    )
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ
                    if self.auto_update:
                        self.toggle_auto_update()
                        self.toggle_auto_update()
                    dialog.destroy()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 300 —Å–µ–∫—É–Ω–¥")
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        ttk.Button(dialog, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_interval).pack(pady=10)
        ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(pady=5)
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–±–æ—Ä —Ç–∏–∫–µ—Ä–∞
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=3, pady=(0, 10), sticky=tk.W+tk.E)
        
        title_label = ttk.Label(header_frame, text=f"–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ü–∏–π", 
                               font=("Arial", 16, "bold"))
        title_label.pack(side=tk.LEFT)
        
        # –ü–æ–ª–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã —Ç–∏–∫–µ—Ä–∞
        ticker_frame = ttk.Frame(header_frame)
        ticker_frame.pack(side=tk.RIGHT, padx=10)
        
        ttk.Label(ticker_frame, text="–¢–∏–∫–µ—Ä:").pack(side=tk.LEFT)
        self.ticker_var = tk.StringVar(value=self.current_ticker)
        ticker_entry = ttk.Entry(ticker_frame, textvariable=self.ticker_var, width=8)
        ticker_entry.pack(side=tk.LEFT, padx=5)
        ticker_entry.bind('<Return>', self.on_ticker_change)
        
        ttk.Button(ticker_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.on_ticker_change).pack(side=tk.LEFT)
        
        # –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
        self.time_label = ttk.Label(main_frame, text="", font=("Arial", 10))
        self.time_label.grid(row=1, column=0, columnspan=3)
        
        # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤
        self.status_label = ttk.Label(main_frame, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤...", 
                                     font=("Arial", 12))
        self.status_label.grid(row=2, column=0, columnspan=3, pady=(0, 5))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–µ
        self.price_label = ttk.Label(main_frame, text="–¶–µ–Ω–∞: -", font=("Arial", 14, "bold"))
        self.price_label.grid(row=3, column=0, columnspan=3, pady=(0, 10))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.Frame(main_frame)
        stats_frame.grid(row=4, column=0, columnspan=3, pady=(0, 10))
        
        self.change_label = ttk.Label(stats_frame, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ: -", font=("Arial", 10))
        self.change_label.pack(side=tk.LEFT, padx=10)
        
        self.change_percent_label = ttk.Label(stats_frame, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ %: -", font=("Arial", 10))
        self.change_percent_label.pack(side=tk.LEFT, padx=10)
        
        self.volume_label = ttk.Label(stats_frame, text="–û–±—ä–µ–º: -", font=("Arial", 10))
        self.volume_label.pack(side=tk.LEFT, padx=10)
        
        self.high_label = ttk.Label(stats_frame, text="–ú–∞–∫—Å: -", font=("Arial", 10))
        self.high_label.pack(side=tk.LEFT, padx=10)
        
        self.low_label = ttk.Label(stats_frame, text="–ú–∏–Ω: -", font=("Arial", 10))
        self.low_label.pack(side=tk.LEFT, padx=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.grid(row=5, column=0, columnspan=3, pady=10, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –í–∫–ª–∞–¥–∫–∞ –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        intraday_frame = ttk.Frame(self.notebook)
        self.notebook.add(intraday_frame, text="–í–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫")
        self.chart_manager.create_intraday_chart(intraday_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        daily_frame = ttk.Frame(self.notebook)
        self.notebook.add(daily_frame, text="–ì—Ä–∞—Ñ–∏–∫ –∑–∞ –¥–µ–Ω—å")
        self.chart_manager.create_daily_chart(daily_frame)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=6, column=0, columnspan=3, pady=20)
        
        ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.manual_update).pack(side=tk.LEFT, padx=5)
        
        self.auto_update_btn = ttk.Button(button_frame, text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–ö–õ", 
                                         command=self.toggle_auto_update)
        self.auto_update_btn.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                  command=self.export_data).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", 
                  command=self.clear_chart).pack(side=tk.LEFT, padx=5)
                  
        #ttk.Button(button_frame, text="–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", 
        #          command=self.open_portfolio).pack(side=tk.LEFT, padx=5)
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        #ttk.Button(button_frame, text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", 
        #          command=self.open_calculator).pack(side=tk.LEFT, padx=5)
                  
        #ttk.Button(button_frame, text="–ü–æ—Ä—Ç—Ñ–µ–ª—å ETF", 
        #          command=self.open_etf_portfolio).pack(side=tk.LEFT, padx=5)
        
        #ttk.Button(button_frame, text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", command=self.open_sharpe_calculator).pack(side=tk.LEFT, padx=5)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        self.chart_manager.setup_zoom_buttons(button_frame, 'intraday')
        self.chart_manager.setup_zoom_buttons(button_frame, 'daily')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        interval_frame = ttk.Frame(button_frame)
        interval_frame.pack(side=tk.LEFT, padx=10)
        
        ttk.Label(interval_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª:").pack(side=tk.LEFT)
        self.interval_var = tk.StringVar(value="5")
        interval_combo = ttk.Combobox(interval_frame, textvariable=self.interval_var,
                                     values=["5", "10", "15", "30", "60"], width=5)
        interval_combo.pack(side=tk.LEFT, padx=5)
        interval_combo.bind('<<ComboboxSelected>>', self.change_interval)
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_update_status = ttk.Label(main_frame, text=f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ (–∫–∞–∂–¥—ã–µ {self.update_interval} —Å–µ–∫)")
        self.auto_update_status.grid(row=7, column=0, columnspan=3)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(5, weight=1)
    def open_etf_portfolio(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è ETF"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–∫–Ω–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è ETF
            if hasattr(self, 'etf_portfolio_window') and self.etf_portfolio_window.window.winfo_exists():
                self.etf_portfolio_window.window.lift()  # –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
                self.etf_portfolio_window.window.focus_force()  # –î–∞–µ–º —Ñ–æ–∫—É—Å
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è ETF
                self.etf_portfolio_window = ETFPortfolioWindow(self.root, self.data_handler)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è ETF: {e}")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.etf_portfolio_window = ETFPortfolioWindow(self.root, self.data_handler)
        
    def on_ticker_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ç–∏–∫–µ—Ä–∞"""
        new_ticker = self.ticker_var.get().strip().upper()
        if new_ticker and new_ticker != self.current_ticker:
            self.current_ticker = new_ticker
            self.data_handler.set_ticker(new_ticker)
            self.root.title(f"–ú–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ü–∏–π - {self.current_ticker}")
            
            # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.chart_manager.clear_charts()
            self.load_daily_data()
            self.manual_update()
    
    def load_daily_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–æ—á–µ–∫ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            filename = f"{self.current_ticker.lower()}_daily_data.json"
            with open(filename, 'r') as f:
                saved_data = json.load(f)
                saved_date = datetime.fromisoformat(saved_data['date'])
                today = self.data_handler.get_moscow_time().date()
                
                if saved_date.date() == today:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    self.chart_manager.daily_data = [(datetime.fromisoformat(d), p) for d, p in saved_data['prices']]
                    self.chart_manager.intraday_dates = [d for d, p in self.chart_manager.daily_data[-50:]]
                    self.chart_manager.intraday_prices = [p for d, p in self.chart_manager.daily_data[-50:]]
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è {self.current_ticker}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    self.chart_manager.update_intraday_chart()
                    self.chart_manager.update_daily_chart()
                    return
        except FileNotFoundError:
            print(f"–§–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è {self.current_ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.current_ticker}: {e}")
        
        # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –∑–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.create_initial_chart_data()
    
    def create_initial_chart_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏"""
        current_time = self.data_handler.get_moscow_time()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        data = self.data_handler.get_stock_data()
        current_price = data['price']
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 5 –º–∏–Ω—É—Ç
        start_time = current_time - timedelta(hours=2)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        if 'open' in data and data['open'] is not None:
            open_price = data['open']
            low_price = data.get('low', open_price * 0.995)
            high_price = data.get('high', open_price * 1.005)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫–∞–∫ –±–∞–∑–æ–≤—É—é
            open_price = current_price * 0.99  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±—ã–ª–æ –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ
            low_price = current_price * 0.985
            high_price = current_price * 1.01
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω
        import random
        self.chart_manager.daily_data = []
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–æ—Ç–∫—Ä—ã—Ç–∏–µ)
        price = open_price
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
        for i in range(24):  # 24 —Ç–æ—á–∫–∏ –∑–∞ 2 —á–∞—Å–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
            point_time = start_time + timedelta(minutes=i * 5)
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            price_change = random.uniform(-0.1, 0.1)  # –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            price = price * (1 + price_change)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –¥–Ω–µ–≤–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            price = max(low_price, min(high_price, price))
            
            self.chart_manager.daily_data.append((point_time, price))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
        self.chart_manager.daily_data.append((current_time, current_price))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç–æ—á–µ–∫)
        self.chart_manager.intraday_dates = [d for d, p in self.chart_manager.daily_data[-50:]]
        self.chart_manager.intraday_prices = [p for d, p in self.chart_manager.daily_data[-50:]]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.save_daily_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        self.chart_manager.update_intraday_chart()
        self.chart_manager.update_daily_chart()
        
        print(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –¥–ª—è {self.current_ticker}")
    
    def save_daily_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        try:
            filename = f"{self.current_ticker.lower()}_daily_data.json"
            data_to_save = {
                'date': self.data_handler.get_moscow_time().date().isoformat(),
                'ticker': self.current_ticker,
                'prices': [(d.isoformat(), p) for d, p in self.chart_manager.daily_data]
            }
            with open(filename, 'w') as f:
                json.dump(data_to_save, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.current_ticker}: {e}")
    
    def get_stock_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö"""
        return self.data_handler.get_stock_data()
    
    def update_data(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        def update_thread():
            while self.auto_update:
                try:
                    data = self.get_stock_data()
                    if data['success']:
                        self.root.after(0, self.update_interface, data)
                    time.sleep(self.update_interval)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    time.sleep(self.update_interval)
        
        self.update_thread = threading.Thread(target=update_thread, daemon=True)
        self.update_thread.start()
    
    def update_interface(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        current_time = data['time']
        price = data['price']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        time_text = f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')}"
        self.time_label.config(text=time_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤
        is_market_open = self.data_handler.check_market_hours(current_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_text = "‚úÖ –¢–æ—Ä–≥–∏ –æ—Ç–∫—Ä—ã—Ç—ã" if is_market_open else "‚ùå –¢–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã"
        status_color = "green" if is_market_open else "red"
        self.status_label.config(text=status_text, foreground=status_color)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        source_info = ""
        if data.get('is_historical'):
            source_info = " (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)"
        elif data.get('is_fallback'):
            source_info = " (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"
        
        price_text = f"–¶–µ–Ω–∞ {self.current_ticker}: {price:.2f} —Ä—É–±{source_info}"
        self.price_label.config(text=price_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        change_abs = data.get('change_absolute', 0)
        change_percent = data.get('change_percent', 0)
        
        change_color = "green" if change_abs >= 0 else "red"
        change_sign = "+" if change_abs >= 0 else ""
        
        change_text = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_sign}{change_abs:.2f} —Ä—É–±"
        change_percent_text = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ %: {change_sign}{change_percent:.2f}%"
        
        self.change_label.config(text=change_text, foreground=change_color)
        self.change_percent_label.config(text=change_percent_text, foreground=change_color)
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        volume_text = f"–û–±—ä–µ–º: {data.get('volume', 0):,.0f} —Ä—É–±".replace(',', ' ')
        self.volume_label.config(text=volume_text)
        
        self.high_label.config(text=f"–ú–∞–∫—Å: {data.get('high', 0):.2f}")
        self.low_label.config(text=f"–ú–∏–Ω: {data.get('low', 0):.2f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—Ä–≥–∏ –æ—Ç–∫—Ä—ã—Ç—ã –ò–õ–ò —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
        if is_market_open or len(self.chart_manager.daily_data) == 0:
            current_time = self.data_handler.get_moscow_time()
            
            # –î–ª—è –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            self.chart_manager.intraday_dates.append(current_time)
            self.chart_manager.intraday_prices.append(price)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if len(self.chart_manager.intraday_dates) > 100:
                self.chart_manager.intraday_dates = self.chart_manager.intraday_dates[-100:]
                self.chart_manager.intraday_prices = self.chart_manager.intraday_prices[-100:]
            
            # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å
            self.chart_manager.daily_data.append((current_time, price))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.save_daily_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            self.chart_manager.update_intraday_chart()
            self.chart_manager.update_daily_chart()
    
    def manual_update(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = self.get_stock_data()
            if data['success']:
                self.update_interface(data)
                messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {self.current_ticker} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def clear_chart(self):
        """–û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self.chart_manager.clear_charts()
        messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞", "–ì—Ä–∞—Ñ–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã!")
    
    def toggle_auto_update(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.auto_update = not self.auto_update
        
        if self.auto_update:
            self.auto_update_btn.config(text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–ö–õ")
            self.auto_update_status.config(text=f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ (–∫–∞–∂–¥—ã–µ {self.update_interval} —Å–µ–∫)")
            self.update_data()
        else:
            self.auto_update_btn.config(text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–´–ö–õ")
            self.auto_update_status.config(text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–´–ö–õ")
    
    def change_interval(self, event=None):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            new_interval = int(self.interval_var.get())
            if new_interval != self.update_interval:
                self.update_interval = new_interval
                self.auto_update_status.config(text=f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ (–∫–∞–∂–¥—ã–µ {self.update_interval} —Å–µ–∫)")
                
                if self.auto_update:
                    self.toggle_auto_update()
                    self.toggle_auto_update()
        except ValueError:
            pass
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        try:
            if self.chart_manager.daily_data:
                df = pd.DataFrame({
                    'DateTime': [d for d, p in self.chart_manager.daily_data],
                    'Price': [p for d, p in self.chart_manager.daily_data]
                })
                
                filename = f"{self.current_ticker.lower()}_daily_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                df.to_csv(filename, index=False, encoding='utf-8')
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            else:
                messagebox.showwarning("–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def open_portfolio(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∞–∫—Ü–∏–π"""
        from stock_portfolio.main_window import PortfolioWindow
        PortfolioWindow(self.root, self.data_handler)

    def open_sharpe_calculator(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞"""
        from sharpe_calculator import SharpeCalculator
        SharpeCalculator(self.root, self.data_handler)
def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = StockMonitor(root)
    root.mainloop()

if __name__ == "__main__":
    main()